/**
 * Flotiq User API
 * ## Getting started   This is your Flotiq User API that allows you to access your data through the Content API that you defined.   ### Access to data   There are several methods that you can use to access your data:  * Live API docs - available via <code>Try it out</code> button available next to each endpoint   * Copying example code on the right side of each endpoint  * By downloading the SDKs available in mulitple languages.  * By downloading the Postman collection and importing it into Postman.    Each of these methods is described in length in the [user documentation](https://flotiq.com/docs/).   ### Authorization   In order to make use of the provided documentation, example code, SDKs and so on - you will need to pull out your API key. We recommend that you start with the ReadOnly API Key which will allow you to make all the `GET` requests but will error-out when you try to modify content. Please remember to replace the key for `POST`, `PUT` and `DELETE` calls.   It\'s also possible to use scoped API keys - you can create those in the API keys section of the Flotiq user interface. This will allow you to create a key that only authorizes access to a specific content type (or a set of content types, if you choose so). Read more about how to use and create API keys in the [API keys documentation](https://flotiq.com/docs/API/).   ## Object access   Once you define a Content Type it will become available in your Content API as a set of endpoints that will allow you to work with objects:   * create  * list  * update  * delete  * batch create  * retrieve single object.  ### Hydration   When you build Content Types that have relation to others your objects will optionally support hydration of related entities. The endpoints that support object retrieval accept a `hydrate` parameter, which can be used to easily fetch hydrated objects. Since this breaks the standard REST concepts - it\'s not enabled by default, but it\'s a very handy feature that allows to reduce the amount of HTTP requests sent over the wire and we strongly recommend to use it.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: hello@flotiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { InlineObject } from '../model/models';
import { Configuration } from '../configuration';
import * as ɵngcc0 from '@angular/core';
export declare class GraphQLService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * Endpoint for GraphQL Queries for Headless Types
     * @param inlineObject
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    graphQL(inlineObject?: InlineObject, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<any>;
    graphQL(inlineObject?: InlineObject, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<HttpResponse<any>>;
    graphQL(inlineObject?: InlineObject, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<HttpEvent<any>>;
    /**
     * Get current descripion of GraphQL Schema
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    graphQLSchema(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<any>;
    graphQLSchema(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<HttpResponse<any>>;
    graphQLSchema(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<HttpEvent<any>>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GraphQLService, [null, { optional: true; }, { optional: true; }]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGhRTC5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImdyYXBoUUwuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0FBZUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBGbG90aXEgVXNlciBBUElcclxuICogIyMgR2V0dGluZyBzdGFydGVkICAgVGhpcyBpcyB5b3VyIEZsb3RpcSBVc2VyIEFQSSB0aGF0IGFsbG93cyB5b3UgdG8gYWNjZXNzIHlvdXIgZGF0YSB0aHJvdWdoIHRoZSBDb250ZW50IEFQSSB0aGF0IHlvdSBkZWZpbmVkLiAgICMjIyBBY2Nlc3MgdG8gZGF0YSAgIFRoZXJlIGFyZSBzZXZlcmFsIG1ldGhvZHMgdGhhdCB5b3UgY2FuIHVzZSB0byBhY2Nlc3MgeW91ciBkYXRhOiAgKiBMaXZlIEFQSSBkb2NzIC0gYXZhaWxhYmxlIHZpYSA8Y29kZT5UcnkgaXQgb3V0PC9jb2RlPiBidXR0b24gYXZhaWxhYmxlIG5leHQgdG8gZWFjaCBlbmRwb2ludCAgICogQ29weWluZyBleGFtcGxlIGNvZGUgb24gdGhlIHJpZ2h0IHNpZGUgb2YgZWFjaCBlbmRwb2ludCAgKiBCeSBkb3dubG9hZGluZyB0aGUgU0RLcyBhdmFpbGFibGUgaW4gbXVsaXRwbGUgbGFuZ3VhZ2VzLiAgKiBCeSBkb3dubG9hZGluZyB0aGUgUG9zdG1hbiBjb2xsZWN0aW9uIGFuZCBpbXBvcnRpbmcgaXQgaW50byBQb3N0bWFuLiAgICBFYWNoIG9mIHRoZXNlIG1ldGhvZHMgaXMgZGVzY3JpYmVkIGluIGxlbmd0aCBpbiB0aGUgW3VzZXIgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9mbG90aXEuY29tL2RvY3MvKS4gICAjIyMgQXV0aG9yaXphdGlvbiAgIEluIG9yZGVyIHRvIG1ha2UgdXNlIG9mIHRoZSBwcm92aWRlZCBkb2N1bWVudGF0aW9uLCBleGFtcGxlIGNvZGUsIFNES3MgYW5kIHNvIG9uIC0geW91IHdpbGwgbmVlZCB0byBwdWxsIG91dCB5b3VyIEFQSSBrZXkuIFdlIHJlY29tbWVuZCB0aGF0IHlvdSBzdGFydCB3aXRoIHRoZSBSZWFkT25seSBBUEkgS2V5IHdoaWNoIHdpbGwgYWxsb3cgeW91IHRvIG1ha2UgYWxsIHRoZSBgR0VUYCByZXF1ZXN0cyBidXQgd2lsbCBlcnJvci1vdXQgd2hlbiB5b3UgdHJ5IHRvIG1vZGlmeSBjb250ZW50LiBQbGVhc2UgcmVtZW1iZXIgdG8gcmVwbGFjZSB0aGUga2V5IGZvciBgUE9TVGAsIGBQVVRgIGFuZCBgREVMRVRFYCBjYWxscy4gICBJdFxcJ3MgYWxzbyBwb3NzaWJsZSB0byB1c2Ugc2NvcGVkIEFQSSBrZXlzIC0geW91IGNhbiBjcmVhdGUgdGhvc2UgaW4gdGhlIEFQSSBrZXlzIHNlY3Rpb24gb2YgdGhlIEZsb3RpcSB1c2VyIGludGVyZmFjZS4gVGhpcyB3aWxsIGFsbG93IHlvdSB0byBjcmVhdGUgYSBrZXkgdGhhdCBvbmx5IGF1dGhvcml6ZXMgYWNjZXNzIHRvIGEgc3BlY2lmaWMgY29udGVudCB0eXBlIChvciBhIHNldCBvZiBjb250ZW50IHR5cGVzLCBpZiB5b3UgY2hvb3NlIHNvKS4gUmVhZCBtb3JlIGFib3V0IGhvdyB0byB1c2UgYW5kIGNyZWF0ZSBBUEkga2V5cyBpbiB0aGUgW0FQSSBrZXlzIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZmxvdGlxLmNvbS9kb2NzL0FQSS8pLiAgICMjIE9iamVjdCBhY2Nlc3MgICBPbmNlIHlvdSBkZWZpbmUgYSBDb250ZW50IFR5cGUgaXQgd2lsbCBiZWNvbWUgYXZhaWxhYmxlIGluIHlvdXIgQ29udGVudCBBUEkgYXMgYSBzZXQgb2YgZW5kcG9pbnRzIHRoYXQgd2lsbCBhbGxvdyB5b3UgdG8gd29yayB3aXRoIG9iamVjdHM6ICAgKiBjcmVhdGUgICogbGlzdCAgKiB1cGRhdGUgICogZGVsZXRlICAqIGJhdGNoIGNyZWF0ZSAgKiByZXRyaWV2ZSBzaW5nbGUgb2JqZWN0LiAgIyMjIEh5ZHJhdGlvbiAgIFdoZW4geW91IGJ1aWxkIENvbnRlbnQgVHlwZXMgdGhhdCBoYXZlIHJlbGF0aW9uIHRvIG90aGVycyB5b3VyIG9iamVjdHMgd2lsbCBvcHRpb25hbGx5IHN1cHBvcnQgaHlkcmF0aW9uIG9mIHJlbGF0ZWQgZW50aXRpZXMuIFRoZSBlbmRwb2ludHMgdGhhdCBzdXBwb3J0IG9iamVjdCByZXRyaWV2YWwgYWNjZXB0IGEgYGh5ZHJhdGVgIHBhcmFtZXRlciwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gZWFzaWx5IGZldGNoIGh5ZHJhdGVkIG9iamVjdHMuIFNpbmNlIHRoaXMgYnJlYWtzIHRoZSBzdGFuZGFyZCBSRVNUIGNvbmNlcHRzIC0gaXRcXCdzIG5vdCBlbmFibGVkIGJ5IGRlZmF1bHQsIGJ1dCBpdFxcJ3MgYSB2ZXJ5IGhhbmR5IGZlYXR1cmUgdGhhdCBhbGxvd3MgdG8gcmVkdWNlIHRoZSBhbW91bnQgb2YgSFRUUCByZXF1ZXN0cyBzZW50IG92ZXIgdGhlIHdpcmUgYW5kIHdlIHN0cm9uZ2x5IHJlY29tbWVuZCB0byB1c2UgaXQuXHJcbiAqXHJcbiAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBPcGVuQVBJIGRvY3VtZW50OiAyLjAuMVxyXG4gKiBDb250YWN0OiBoZWxsb0BmbG90aXEuY29tXHJcbiAqXHJcbiAqIE5PVEU6IFRoaXMgY2xhc3MgaXMgYXV0byBnZW5lcmF0ZWQgYnkgT3BlbkFQSSBHZW5lcmF0b3IgKGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaCkuXHJcbiAqIGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaFxyXG4gKiBEbyBub3QgZWRpdCB0aGUgY2xhc3MgbWFudWFsbHkuXHJcbiAqL1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycywgSHR0cFJlc3BvbnNlLCBIdHRwRXZlbnQsIEh0dHBQYXJhbWV0ZXJDb2RlYyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBJbmxpbmVPYmplY3QgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBDb25maWd1cmF0aW9uIH0gZnJvbSAnLi4vY29uZmlndXJhdGlvbic7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEdyYXBoUUxTZXJ2aWNlIHtcclxuICAgIHByb3RlY3RlZCBodHRwQ2xpZW50OiBIdHRwQ2xpZW50O1xyXG4gICAgcHJvdGVjdGVkIGJhc2VQYXRoOiBzdHJpbmc7XHJcbiAgICBkZWZhdWx0SGVhZGVyczogSHR0cEhlYWRlcnM7XHJcbiAgICBjb25maWd1cmF0aW9uOiBDb25maWd1cmF0aW9uO1xyXG4gICAgZW5jb2RlcjogSHR0cFBhcmFtZXRlckNvZGVjO1xyXG4gICAgY29uc3RydWN0b3IoaHR0cENsaWVudDogSHR0cENsaWVudCwgYmFzZVBhdGg6IHN0cmluZywgY29uZmlndXJhdGlvbjogQ29uZmlndXJhdGlvbik7XHJcbiAgICBwcml2YXRlIGFkZFRvSHR0cFBhcmFtcztcclxuICAgIHByaXZhdGUgYWRkVG9IdHRwUGFyYW1zUmVjdXJzaXZlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBFbmRwb2ludCBmb3IgR3JhcGhRTCBRdWVyaWVzIGZvciBIZWFkbGVzcyBUeXBlc1xyXG4gICAgICogQHBhcmFtIGlubGluZU9iamVjdFxyXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cclxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cclxuICAgICAqL1xyXG4gICAgZ3JhcGhRTChpbmxpbmVPYmplY3Q/OiBJbmxpbmVPYmplY3QsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtcclxuICAgICAgICBodHRwSGVhZGVyQWNjZXB0PzogdW5kZWZpbmVkO1xyXG4gICAgfSk6IE9ic2VydmFibGU8YW55PjtcclxuICAgIGdyYXBoUUwoaW5saW5lT2JqZWN0PzogSW5saW5lT2JqZWN0LCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge1xyXG4gICAgICAgIGh0dHBIZWFkZXJBY2NlcHQ/OiB1bmRlZmluZWQ7XHJcbiAgICB9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8YW55Pj47XHJcbiAgICBncmFwaFFMKGlubGluZU9iamVjdD86IElubGluZU9iamVjdCwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7XHJcbiAgICAgICAgaHR0cEhlYWRlckFjY2VwdD86IHVuZGVmaW5lZDtcclxuICAgIH0pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PjtcclxuICAgIC8qKlxyXG4gICAgICogR2V0IGN1cnJlbnQgZGVzY3JpcGlvbiBvZiBHcmFwaFFMIFNjaGVtYVxyXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cclxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cclxuICAgICAqL1xyXG4gICAgZ3JhcGhRTFNjaGVtYShvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7XHJcbiAgICAgICAgaHR0cEhlYWRlckFjY2VwdD86IHVuZGVmaW5lZDtcclxuICAgIH0pOiBPYnNlcnZhYmxlPGFueT47XHJcbiAgICBncmFwaFFMU2NoZW1hKG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7XHJcbiAgICAgICAgaHR0cEhlYWRlckFjY2VwdD86IHVuZGVmaW5lZDtcclxuICAgIH0pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxhbnk+PjtcclxuICAgIGdyYXBoUUxTY2hlbWEob2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7XHJcbiAgICAgICAgaHR0cEhlYWRlckFjY2VwdD86IHVuZGVmaW5lZDtcclxuICAgIH0pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PjtcclxufVxyXG4iXX0=